참고 블로그 : https://ssocoit.tistory.com/195?category=966547


npm i nodemon -D

Run `npm audit` for details.

PS C:\Users\jimmy\Desktop\zoom> git init .
PS C:\Users\jimmy\Desktop\zoom> npm i @babel/core @babel/cli @babel/node -D
PS C:\Users\jimmy\Desktop\zoom> npm i @babel/preset-env -D
PS C:\Users\jimmy\Desktop\zoom> npm i express
PS C:\Users\jimmy\Desktop\zoom> npm i pug

0.4 강
nodemon 프로젝트를 살펴보고 변경사항이 있을 시 서버를 재시작해주는 프로그램

1.1 강
http stateless => backend가 유저를 기억하지 못한다.

1.2강 
npm i ws

1.3강
webSocket은 브라우저와 서버사이의 연결이다.

2.0강
Socket IO는 프론트와 백엔드 간 실시간 통신을 가능하게 해주는 프로임 워크 또는 라이브러리

2.1강
Socket IO설치 npm i socket.io

3.8강
npm i -g localtunnel
터미널두개키고
npm run dev 
lt --port 3000 


# 노드에서 현재시간 받아오려면 data-utils 필요

// 마이크를 켠다
  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  let recognition = new SpeechRecognition();
  recognition.interimResults = true;
  recognition.lang = "ko-KR";
  recognition.start();
  console.log("asdsa");

  // 음성인식 시작 로그 찍어야함
  recognition.onstart = function () {
    sound_detect_check= false;
    // console.log("asd");
    // makeNewTextContent(); // 음성 인식 시작시마다 새로운 문단을 추가한다
  };

  // 음성인식 감지 안되면 소켓에 종료시간과 메시지를 등록하고 초기화 => 녹음 다시 시작
  recognition.onend = function () {
  const date = new Date();
  end_time = date.getTime();
  if (texts !== "") {
    // p.textContent = texts;
    // sockets["message"] = texts;
    // sockets["end_time"] = timeConverter(end_time);
    // console.log(sockets);
  }
  texts = "";
  recognition.start();
  };

  // 음성감지 된경우 시작시간을 등록한다
  recognition.onresult = function (e) {
  if (sound_detect_check !== true) {
    // sockets = sockets_json;
    const date = new Date();
    start_time = date.getTime();
    // sockets["start_time"] = timeConverter(start_time);
    sound_detect_check = true;
  }
  texts = Array.from(e.results)
    .map((results) => results[0].transcript)
    .join("");
  console.log(texts);
  };